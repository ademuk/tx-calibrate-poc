{"version":3,"sources":["calibrate/steps/Calibrate.module.css","msp/MockMsp.module.css","App.module.css","calibrate/steps/Initial.module.css","calibrate/Calibrator.module.css","msp/MockMspContext.js","msp/useMsp.js","calibrate/steps/Initial.js","calibrate/steps/calibrate/ChannelDetect.js","calibrate/steps/Calibrate.js","calibrate/steps/Done.js","calibrate/Calibrator.js","tx/Channel.js","tx/Tx.js","msp/MockMsp.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Calibrate","txChannelWrapper","txChannel","meter","fill","fill0","fill1","fill2","fill3","label","matchedChannel","ChannelDetect","restartButton","MockMsp","inlineInput","App","App-header","buttons","Calibrator","MockMspContext","React","initialState","rxrange","rxmap","reducer","state","action","type","Object","objectSpread","defineProperty","key","value","MockMspContextProvider","props","_React$useReducer","_React$useReducer2","slicedToArray","react","Provider","children","useMsp","_useContext","useContext","_useContext2","dispatch","DEFAULT_RX_RANGE_MIN","DEFAULT_RX_RANGE_MAX","Initial","_ref","onStart","_useMsp","_useMsp2","rxRanges","setRxRanges","isRxRangeDefault","channels","every","_ref2","_ref3","min","max","react_default","a","createElement","className","styles","onClick","map","MATCH_THRESHOLD","name","txValues","detectedChannels","onDetect","_useState","useState","_useState2","initialTxValues","newValues","match","findIndex","channel","i","Math","abs","values","indexOf","CHANNELS","code","onRestart","onDone","currentChannel","setCurrentChannel","_useState3","_useState4","setDetectedChannels","_useState5","_useState6","initialMins","setMins","_useState7","_useState8","initialMaxs","setMaxs","setRxRange","_useMsp3","_useMsp4","setRxMap","detectedChannelsToChannelMapping","txToChannels","keys","reduce","prev","curr","ch","getRxRange","minVals","v","maxVals","handleDetect","handleRestart","val","length","channelIsAssigned","concat","cx","style","left","right","class","disabled","nextButton","_ref4","mapping","join","Done","steps","INITIAL","CALIBRATE","DONE","step","setStep","Channel","onChange","options","display","width","event","target","margin-right","Tx","setMin","setMax","_values","t","e","r","overflow","float","setRxranges","channelMapping","setChannelMapping","handleRxRangeChange","row","parseInt","Boolean","window","location","hostname","ReactDOM","render","txValue","setTxValue","src","padding","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71704a02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calibrate\":\"Calibrate_Calibrate__lNyLU\",\"txChannelWrapper\":\"Calibrate_txChannelWrapper__NHufk\",\"txChannel\":\"Calibrate_txChannel__fhGk7\",\"meter\":\"Calibrate_meter__3SaHl\",\"fill\":\"Calibrate_fill__23siV\",\"fill0\":\"Calibrate_fill0__3OkNs\",\"fill1\":\"Calibrate_fill1__1LedO\",\"fill2\":\"Calibrate_fill2__2Y5zv\",\"fill3\":\"Calibrate_fill3__13Uyi\",\"label\":\"Calibrate_label__1Lmpx\",\"matchedChannel\":\"Calibrate_matchedChannel__T9NGi\",\"ChannelDetect\":\"Calibrate_ChannelDetect__3nXWV\",\"restartButton\":\"Calibrate_restartButton__7fvJ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MockMsp\":\"MockMsp_MockMsp__1-hMS\",\"inlineInput\":\"MockMsp_inlineInput__29yJV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2qSsh\",\"App-header\":\"App_App-header__3Ih27\",\"MockMsp\":\"App_MockMsp__2amMc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Initial_buttons__zKnvT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calibrator\":\"Calibrator_Calibrator__mjA8A\"};","import * as React from \"react\";\n\nexport const MockMspContext = React.createContext();\n\nconst DEFAULT_RXRANGE = [\n  [1000, 2000],\n  [1000, 2000],\n  [1000, 2000],\n  [1000, 2000]\n];\n\nconst DEFAULT_RX_MAP = 'AETR1234';\n\nconst initialState = {\n  rxrange: DEFAULT_RXRANGE,\n  rxmap: DEFAULT_RX_MAP\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"set\":\n      return {...state, [action.key]: action.value};\n  }\n};\n\nexport function MockMspContextProvider(props) {\n  let [state, dispatch] = React.useReducer(reducer, initialState);\n  let value = [state, dispatch];\n\n  return <MockMspContext.Provider value={value}>{props.children}</MockMspContext.Provider>;\n}\n\n","import { useContext } from 'react';\nimport {MockMspContext} from \"./MockMspContext\";\n\nexport default function useMsp(key) {\n  const [state, dispatch] = useContext(MockMspContext);\n  return [state[key], value => dispatch({\n    type: 'set',\n    key,\n    value\n  })];\n}\n","import React from 'react';\nimport useMsp from \"../../msp/useMsp\";\nimport styles from './Initial.module.css';\n\nconst DEFAULT_RX_RANGE_MIN = 1000;\nconst DEFAULT_RX_RANGE_MAX = 2000;\n\nexport default ({onStart}) => {\n  const [rxRanges, setRxRanges] = useMsp('rxrange');\n\n  const isRxRangeDefault = channels => channels.every(([min, max]) => min === DEFAULT_RX_RANGE_MIN && max === DEFAULT_RX_RANGE_MAX);\n\n  function handleStart() {\n    if (!isRxRangeDefault(rxRanges)) {\n      setRxRanges(rxRanges.map(() => [DEFAULT_RX_RANGE_MIN, DEFAULT_RX_RANGE_MAX]))\n    }\n    onStart && onStart();\n  }\n\n  return rxRanges === null ? 'Loading' : <div>\n    <p>Before you start:</p>\n    <ol>\n      {!isRxRangeDefault(rxRanges) && <li>Your rxrange setting has custom values. Running this calibration will reset these</li>}\n      <li>It is recommended that you reset any custom endpoints and/or trims on your transmitter</li>\n      <li>Power up you receiver and transmitter (Don't forget to remove your props if applicable)</li>\n    </ol>\n\n    <div className={styles.buttons}>\n      <button onClick={handleStart} className=\"button\">Start Calibration</button>\n    </div>\n\n    {false && rxRanges.map(([min, max], i) => <div key={i}>{min} - {max}</div>)}\n  </div>\n}\n","import React, {useState} from 'react';\n\nconst MATCH_THRESHOLD = 450;\n\nexport default ({name, txValues, detectedChannels, onDetect}) => {\n  const [initialTxValues, setCurrentTxValues] = useState(txValues);\n\n  function anyValuesMeetThreshold(currentValues, newValues) {\n    return currentValues.findIndex((channel, i) => {\n      return Math.abs(channel - newValues[i]) > MATCH_THRESHOLD\n    })\n  }\n\n  const match = anyValuesMeetThreshold(initialTxValues, txValues);\n\n  if (match > -1) {\n    Object.values(detectedChannels).indexOf(match) === -1 && onDetect(match);\n  }\n\n  return (\n    <p>Please move <strong>{name}</strong> to its extremes, then click next</p>\n  )\n}\n","import React, {useState} from 'react';\nimport ChannelDetect from './calibrate/ChannelDetect';\nimport useMsp from \"../../msp/useMsp\";\nimport styles from './Calibrate.module.css';\nimport cx from 'classnames';\n\nconst CHANNELS = [\n  {\n    name: 'Throttle',\n    code: 'T'\n  },\n  {\n    name: 'Yaw',\n    code: 'R'\n  },\n  {\n    name: 'Pitch',\n    code: 'E'\n  },\n  {\n    name: 'Roll',\n    code: 'A'\n  }\n];\n\nexport default ({txValues, onRestart, onDone}) => {\n\n  if (txValues === null) {\n    return 'Loading'\n  }\n\n  const [currentChannel, setCurrentChannel] = useState(0);\n  const [detectedChannels, setDetectedChannels] = useState({});\n  const [initialMins, setMins] = useState(txValues);\n  const [initialMaxs, setMaxs] = useState(txValues);\n  const [rxRange, setRxRange] = useMsp('rxrange');\n  const [rxMap, setRxMap] = useMsp('rxmap');\n\n  function detectedChannelsToChannelMapping(detectedChannels) {\n    const txToChannels = Object.keys(detectedChannels).reduce((prev, curr) => {\n      prev[detectedChannels[curr]] = curr;\n      return prev;\n    }, {});\n\n    const mapping = CHANNELS.map((channel, i) => {\n      const ch = txToChannels[i];\n      return CHANNELS[ch].code;\n    });\n    return mapping;\n  }\n\n  function getRxRange() {\n    return minVals.map((v, i) => [v, maxVals[i]]);\n  }\n\n  function handleNext() {\n    setCurrentChannel(currentChannel + 1);\n  }\n\n  function handleDetect(channel) {\n    setDetectedChannels({\n      ...detectedChannels,\n      [currentChannel]: channel\n    });\n  }\n\n  function handleRestart() {\n    onRestart();\n  }\n\n  function handleApply() {\n    const mapping = detectedChannelsToChannelMapping(detectedChannels);\n\n    setRxMap(`${mapping.join('')}1234`);\n    setRxRange(getRxRange());\n\n    onDone();\n  }\n\n  const minVals = txValues.map((val, i) => Math.min(initialMins[i], val));\n  const maxVals = txValues.map((val, i) => Math.max(initialMaxs[i], val));\n\n  if (!initialMaxs.every((val, i) => val === maxVals[i])) {\n    setMaxs(maxVals);\n  }\n\n  if (!initialMins.every((val, i) => val === minVals[i])) {\n    setMins(minVals);\n  }\n\n  return <div className={styles.Calibrate}>\n    {currentChannel !== CHANNELS.length && txValues.map((value, i) => {\n      const channelIsAssigned = Object.values(detectedChannels).indexOf(i);\n      return (\n        <div key={i} className={styles.txChannelWrapper}>\n          <div className={styles.txChannel}>\n            <div className={styles.matchedChannel}>\n              {channelIsAssigned > -1 && ` ✔ ${CHANNELS[channelIsAssigned].name}`}\n            </div>\n            <div className={styles.meter}>\n              <div className={cx(\n                  styles.fill,\n                  styles[`fill${i}`]\n                )} style={{left: `${((minVals[i] - 1000) / 10)}%`, right: `${((2000 - maxVals[i]) / 10)}%`}}></div>\n              <div class={styles.label}>{value}</div>\n            </div>\n          </div>\n        </div>\n      )\n    })}\n\n    <div className={styles.ChannelDetect}>\n      {CHANNELS.map(({name}, i) => {\n        return currentChannel === i &&\n          <ChannelDetect name={name}\n                         txValues={txValues}\n                         detectedChannels={detectedChannels}\n                         onDetect={handleDetect}\n                         key={name} />\n      })}\n\n\n      {currentChannel !== CHANNELS.length &&\n      <button onClick={handleRestart} className={cx(\n        styles.restartButton,\n        \"button\",\n        \"button-outline\"\n        )} >Restart</button>}\n\n      {currentChannel < CHANNELS.length &&\n      <button onClick={handleNext} disabled={currentChannel === Object.keys(detectedChannels).length} className={cx(\n        styles.nextButton,\n        'button'\n      )}>\n        Next\n      </button>}\n    </div>\n\n    {currentChannel === CHANNELS.length &&\n      <div>\n        <div>\n          <p>The following settings are ready to be applied:</p>\n          <ul>\n            <li>rxrange:\n              <ul>\n                {getRxRange().map(([min, max]) => <li>{`${min} - ${max}`}</li>)}\n              </ul>\n            </li>\n            <li>Channel mapping: {detectedChannelsToChannelMapping(detectedChannels)}</li>\n          </ul>\n        </div>\n        <button onClick={handleRestart} className={cx(\n          styles.restartButton,\n          \"button\",\n          \"button-outline\"\n        )}>Restart</button>\n\n        <button onClick={handleApply} className=\"button\">Apply settings</button>\n      </div>\n    }\n  </div>\n}\n","import React from 'react';\n\n\nexport default ({onRestart}) => {\n  return <div>\n    <h2>Calibration complete</h2>\n    <p>You're all done!</p>\n    <p>\n      <button class=\"button button-outline\" onClick={onRestart}>Restart</button>\n    </p>\n  </div>\n}\n","import React, {useState} from 'react';\nimport Initial from './steps/Initial'\nimport Calibrate from './steps/Calibrate'\nimport Done from './steps/Done'\nimport styles from './Calibrator.module.css';\n\nconst steps = {\n  INITIAL: 'initial',\n  CALIBRATE: 'calibrate',\n  DONE: 'done'\n};\n\nexport default ({txValues}) => {\n  const [step, setStep] = useState('initial');\n\n  function handleStartCalibration() {\n    setStep(steps.CALIBRATE);\n  }\n\n  function handleRestart() {\n    setStep(steps.INITIAL);\n  }\n\n  function handleDone() {\n    setStep(steps.DONE);\n  }\n\n  return (\n    <div className={styles.Calibrator}>\n      {step === steps.INITIAL && <Initial onStart={handleStartCalibration} />}\n      {step === steps.CALIBRATE && <Calibrate txValues={txValues} onDone={handleDone} onRestart={handleRestart} />}\n      {step === steps.DONE && <Done onRestart={handleRestart} />}\n    </div>\n  )\n}\n","import React from 'react';\n\n\nexport default ({label, value, onChange, options}) => {\n  return <div>\n    <span style={{display: \"inline-block\", width: \"70px\"}}>{label}</span>\n    <input\n      type=\"range\"\n      min={options.min} max={options.max}\n      value={value}\n      onChange={event => onChange(event.target.value)}\n      step={1}\n      style={{\"margin-right\": \"10px\"}}/>\n    {value}\n  </div>\n}\n","import React, {useState} from 'react';\nimport Channel from './Channel'\n\n\nexport default ({values, onChange}) => {\n  const [min, setMin] = useState(987);\n  const [max, setMax] = useState(2011);\n\n  const [t, a, e, r] = values;\n\n  return <div style={{overflow: \"hidden\"}}>\n    <div style={{float:\"right\", width: \"300px\"}}>\n      <h4>TX endpoints</h4>\n      <div>\n        Min <input value={min} onChange={event => setMin(event.target.value)} type=\"number\" style={{display: \"inline\", width: \"100px\", \"margin-right\": \"10px\"}} />\n\n        Max <input value={max} onChange={event => setMax(event.target.value)} type=\"number\" style={{display: \"inline\", width: \"100px\"}} />\n      </div>\n    </div>\n\n    <h3>TX</h3>\n    <Channel label=\"Throttle\"\n            value={t}\n            onChange={value => onChange([value, a, e, r])}\n            options={{min, max}} />\n    <Channel label=\"Aileron\"\n             value={a}\n             onChange={value => onChange([t, value, e, r])}\n             options={{min, max}} />\n    <Channel label=\"Elevator\"\n             value={e}\n             onChange={value => onChange([t, a, value, r])}\n             options={{min, max}} />\n    <Channel label=\"Rudder\"\n             value={r}\n             onChange={value => onChange([t, a, e, value])}\n             options={{min, max}} />\n  </div>\n}\n","import React from 'react';\nimport useMsp from \"./useMsp\";\nimport styles from './MockMsp.module.css';\n\nexport default () => {\n  const [rxRanges, setRxranges] = useMsp('rxrange');\n  const [channelMapping, setChannelMapping] = useMsp('rxmap');\n\n  function handleRxRangeChange(ch, i) {\n    return event => {\n      setRxranges(rxRanges.map(([min, max], row) => {\n        return row === ch ? i === 0 ? [parseInt(event.target.value, 10), max] : [min, parseInt(event.target.value, 10)] : [min, max]\n      }))\n    }\n  }\n\n  function onChannelMappingChange(event) {\n    setChannelMapping(event.target.value)\n  }\n\n  return (<div className={styles.MockMsp}>\n    <div>\n    <h3>MSP</h3>\n\n    <div style={{float: \"right\"}}>\n      <h4>Channel mapping</h4>\n      <select value={channelMapping} onChange={onChannelMappingChange}>\n        <option value=\"AETR1234\">AETR (FrSky / Futaba / Hitec)</option>\n        <option value=\"TAER1234\">TAER (Spektrum / Graupner / JR)</option>\n      </select>\n    </div>\n\n    <h4>rxrange</h4>\n    {rxRanges.map(([min, max], i) => {\n      return <div key={i}>\n        ch{i+1} <input value={min} onChange={handleRxRangeChange(i, 0)} type=\"number\" className={styles.inlineInput} />\n        -\n        <input value={max} onChange={handleRxRangeChange(i, 1)} type=\"number\" className={styles.inlineInput} />\n      </div>\n    })}\n    </div>\n  </div>)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useState} from 'react';\nimport Calibrator from './calibrate/Calibrator';\nimport TX from './tx/Tx';\nimport MockMsp from './msp/MockMsp';\nimport {MockMspContextProvider} from './msp/MockMspContext';\n\nimport styles from './App.module.css';\n\n\nexport default () => {\n  const [showTx, setShowTx] = useState(false);\n\n  const [txValue, setTxValue] = useState([\n    1500,\n    1500,\n    1500,\n    1500\n  ]);\n\n  return (\n    <MockMspContextProvider>\n      <div className={styles.App}>\n        <header className=\"App-header\">\n          <img src=\"https://raw.githubusercontent.com/wiki/betaflight/betaflight/images/betaflight/bf_logo.png\"\n               style={{float: \"right\", width: \"200px\", padding: \"2px 0 0 0\"}} />\n          <h1>TX Calibration PoC</h1>\n        </header>\n        <Calibrator txValues={txValue} />\n\n        <div className={styles.MockMsp}>\n          <TX values={txValue} onChange={setTxValue} />\n\n          <MockMsp />\n        </div>\n      </div>\n    </MockMspContextProvider>\n  )\n}\n"],"sourceRoot":""}